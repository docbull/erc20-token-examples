[{"/home/inlab/NFT-practices/hello-world-part-four-tutorial/starter-files/src/index.js":"1","/home/inlab/NFT-practices/hello-world-part-four-tutorial/starter-files/src/App.js":"2","/home/inlab/NFT-practices/hello-world-part-four-tutorial/starter-files/src/reportWebVitals.js":"3","/home/inlab/NFT-practices/hello-world-part-four-tutorial/starter-files/src/HelloWorld.js":"4","/home/inlab/NFT-practices/hello-world-part-four-tutorial/starter-files/src/util/interact.js":"5","/home/inlab/erc20-token-examples/starter-files/src/index.js":"6","/home/inlab/erc20-token-examples/starter-files/src/App.js":"7","/home/inlab/erc20-token-examples/starter-files/src/reportWebVitals.js":"8","/home/inlab/erc20-token-examples/starter-files/src/HelloWorld.js":"9","/home/inlab/erc20-token-examples/starter-files/src/util/interact.js":"10"},{"size":500,"mtime":1653989094741,"results":"11","hashOfConfig":"12"},{"size":182,"mtime":1653989094741,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1653989094741,"results":"14","hashOfConfig":"12"},{"size":3320,"mtime":1654240565481,"results":"15","hashOfConfig":"12"},{"size":4394,"mtime":1654956626514,"results":"16","hashOfConfig":"12"},{"size":500,"mtime":1654975891559,"results":"17","hashOfConfig":"18"},{"size":182,"mtime":1654975891555,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":1654975891559,"results":"20","hashOfConfig":"18"},{"size":3356,"mtime":1654978021296,"results":"21","hashOfConfig":"18"},{"size":5551,"mtime":1654987515893,"results":"22","hashOfConfig":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"e2i3b1",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"5sv199",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/inlab/NFT-practices/hello-world-part-four-tutorial/starter-files/src/index.js",[],["46","47"],"/home/inlab/NFT-practices/hello-world-part-four-tutorial/starter-files/src/App.js",[],"/home/inlab/NFT-practices/hello-world-part-four-tutorial/starter-files/src/reportWebVitals.js",[],"/home/inlab/NFT-practices/hello-world-part-four-tutorial/starter-files/src/HelloWorld.js",["48","49","50"],"/home/inlab/NFT-practices/hello-world-part-four-tutorial/starter-files/src/util/interact.js",["51","52","53"],"/home/inlab/erc20-token-examples/starter-files/src/index.js",[],["54","55"],"/home/inlab/erc20-token-examples/starter-files/src/App.js",[],"/home/inlab/erc20-token-examples/starter-files/src/reportWebVitals.js",[],"/home/inlab/erc20-token-examples/starter-files/src/HelloWorld.js",["56","57","58","59"],"import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport {\n  helloWorldContract,\n  connectWallet,\n  updateMessage,\n  loadCurrentMessage,\n  getCurrentWalletConnected,\n  testContract,\n} from \"./util/interact.js\";\n\nimport alchemylogo from \"./alchemylogo.svg\";\n\nconst HelloWorld = () => {\n  //state variables\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [message, setMessage] = useState(\"No connection to the network.\"); //default message\n  const [newMessage, setNewMessage] = useState(\"\");\n\n  //called only once\n  useEffect(async () => {\n    const message = await loadCurrentMessage();\n    setMessage(message);\n    addSmartContractListener();\n\n    const {address, status} = await getCurrentWalletConnected();\n    setWallet(address);\n    setStatus(status);\n\n    addWalletListener();\n  }, []);\n\n  function addSmartContractListener() { //TODO: implement\n    // testContract\n    helloWorldContract.events.UpdatedMessages({}, (error, data) => {\n      if (error) {\n        setStatus(\"üò• \" + error.message);\n      } else {\n        console.log(data);\n        console.log(data.returnValues);\n        setMessage(data.returnValues[1]);\n        setNewMessage(\"\");\n        setStatus(\"üéâ Your message has been updated!\");\n      }\n    })\n  }\n\n  function addWalletListener() { //TODO: implement\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"üëÜüèΩ Write a message in the text-field above.\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"ü¶ä Connect to Metamask using the top right button.\");\n        }\n      });\n    } else {\n      setStatus(\n        <p>\n          {\" \"}\n          ü¶ä{\" \"}\n          <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n            You must install Metamask, a virtual Ethereum wallet, in your\n            browser.\n          </a>\n        </p>\n      );\n    }\n  }\n\n  const connectWalletPressed = async () => { //TODO: implement\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n  const onUpdatePressed = async () => { //TODO: implement\n    const {status} = await updateMessage(walletAddress, newMessage);\n    setStatus(status);\n  };\n\n  //the UI of our component\n  return (\n    <div id=\"container\">\n      <img id=\"logo\" src={alchemylogo}></img>\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\n        {walletAddress.length > 0 ? (\n          \"Connected: \" +\n          String(walletAddress).substring(0, 6) +\n          \"...\" +\n          String(walletAddress).substring(38)\n        ) : (\n          <span>Connect Wallet</span>\n        )}\n      </button>\n\n      <h2 style={{ paddingTop: \"50px\" }}>Current Message:</h2>\n      <p>{message}</p>\n\n      <h2 style={{ paddingTop: \"18px\" }}>New Message:</h2>\n\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"Update the message in your smart contract.\"\n          onChange={(e) => setNewMessage(e.target.value)}\n          value={newMessage}\n        />\n        <p id=\"status\">{status}</p>\n\n        <button id=\"publish\" onClick={onUpdatePressed}>\n          Update\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default HelloWorld;\n","/home/inlab/erc20-token-examples/starter-files/src/util/interact.js",["60","61","62"],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":21,"column":13,"nodeType":"69","endLine":31,"endColumn":4},{"ruleId":"70","severity":1,"message":"71","line":63,"column":11,"nodeType":"72","endLine":63,"endColumn":73},{"ruleId":"73","severity":1,"message":"74","line":86,"column":7,"nodeType":"72","endLine":86,"endColumn":40},{"ruleId":"70","severity":1,"message":"71","line":43,"column":21,"nodeType":"72","endLine":43,"endColumn":83},{"ruleId":"70","severity":1,"message":"71","line":81,"column":21,"nodeType":"72","endLine":81,"endColumn":83},{"ruleId":"70","severity":1,"message":"71","line":127,"column":21,"nodeType":"72","endLine":127,"endColumn":91},{"ruleId":"63","replacedBy":"75"},{"ruleId":"65","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":9,"column":3,"nodeType":"79","messageId":"80","endLine":9,"endColumn":15},{"ruleId":"67","severity":1,"message":"68","line":22,"column":13,"nodeType":"69","endLine":32,"endColumn":4},{"ruleId":"70","severity":1,"message":"71","line":65,"column":11,"nodeType":"72","endLine":65,"endColumn":73},{"ruleId":"73","severity":1,"message":"74","line":88,"column":7,"nodeType":"72","endLine":88,"endColumn":40},{"ruleId":"70","severity":1,"message":"71","line":51,"column":21,"nodeType":"72","endLine":51,"endColumn":83},{"ruleId":"70","severity":1,"message":"71","line":89,"column":21,"nodeType":"72","endLine":89,"endColumn":83},{"ruleId":"70","severity":1,"message":"71","line":161,"column":21,"nodeType":"72","endLine":161,"endColumn":91},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",["81"],["82"],"no-unused-vars","'testContract' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]